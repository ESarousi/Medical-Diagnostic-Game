#Importing Packages
from bs4 import BeautifulSoup
import datetime as dt
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from IPython.display import display, HTML
import math
import os
import pandas as pd
import random
import re
import requests
import time
display(HTML("<style>.container { width:100% !important; }</style>"))

#Might include it - list of different illnesses. May use it for modeling for diagnosis.

URL = "https://www.nhsinform.scot/illnesses-and-conditions/a-to-z"
r = requests.get(URL)
  
letters = ['A ', 'B ', 'C ', 'D ', 'E ', 'F ', 'G ', 'H ', 'I ', 'J ', 'K ', 'L ',
           'M ', 'N ', 'O ', 'P ', 'Q ', 'R ', 'S ', 'T ', 'U ', 'V ', 'W ', 'X ', 'Y ', 'Z ']
soup = BeautifulSoup(r.content, 'lxml') # Pulling html info from bs4.
soup = str(soup.prettify())
soup = soup[20192:-9925] #Slicing through unnecessary info.
soup = re.sub('<[^>]+>', '', soup) #Removing a lot of unnecessary html coding.
soup = soup.replace('Back to top', '')
soup = soup.replace('''          
         
         
          ''', '')
soup = soup.replace('\n ', '')
soup_list = soup.split('\n          ')

soup_list = [s.strip() for s in soup_list]

for s in soup_list:
    if len(s) > 30 or s[1] == " ":
        soup_list.remove(s)
        
a1c = {"name": "a1c", "cost": 85, "time": 1}
acetaminophen = {"name": "acetaminophen", "cost": 2, "time": 0, "side_effects": ['Nausea', 'Vomiting', 'Constipation', 'Itching', 'Stomach Discomfort']}
angiogram = {"name": "angiogram", "cost": 1050, "time": 2}
appendectomy = {"name": "appendectomy", "cost": 9120, "time": 3}
back_surgery = {"name": "back surgery", "cost": 15391, "time": 3}
barium_swallow = {"name": "barium swallow", "cost": 250, "time": 1}
bone_graft = {"name": "bone graft", "cost": 9663, "time": 2}
bone_biopsy = {"name": "bone biopsy", "cost": 3021, "time": 48}
bone_marrow_injection = {"name": "bone marrow injection", "cost": 3505, "time": 1}
c_section = {"name": "c-section", "cost": 9600, "time": 1}
capsule_endoscopy = {"name": "capsule endoscopy", "cost": 1513, "time": 8}
cast = {"name": "cast", "cost": 485, "time": 1}
cateracts_surgery = {"name": "cateracts surgery", "cost": 4688, "time": 1}
colonoscopy = {"name": "colonoscopy", "cost": 3167, "time": 1}
covid_19_test = {"name": "covid-19 test", "cost": 181, "time": 1}
ct_scan = {"name": "ct scan", "cost": 2519, "time": 1}
double_masectomy = {"name": "double masectomy", "cost": 14412, "time": 3}
drug_screen = {"name": "drug screen", "cost": 250, "time": 1}
electrocardiogram = {"name": "electrocardiogram", "cost": 109, "time": 1}
eye_biopsy = {"name": "eye biopsy", "cost": 3545, "time": 48}
feeding_tube_placement = {"name": "feeding tube placement", "cost": 3060, "time": 1}
gall_bladder_removal = {"name": "gall bladder removal", "cost": 9515, "time": 1}
hemmerrhoidectomy = {"name": "hemmerrhoidectomy", "cost": 5123, "time": 1}
hepatitis_a_antibody_test = {"name": "hepatitis a antibody test", "cost": 84, "time": 48}
hepatitis_a_vaccine = {"name": "hepatitis a vaccine", "cost": 153, "time": 1}
hepatitis_b_antibody_test = {"name": "hepatitis b antibody test", "cost": 44, "time": 48}
hepatitis_b_vaccine = {"name": "hepatitis b vaccine", "cost": 153, "time": 1}
hepatitis_c_antibody_test = {"name": "hepatitis c antibody test", "cost": 62, "time": 48}
humalog = {"name": "humalog", "cost": 96, "time": 0}
hiv_test = {"name": "hiv test", "cost": 84, "time": 0}
ibuprofen = {"name": "ibuprofen", "cost": 3, "time": 0, "side_effects": ['Constipation', 'Diarrhea', 'Gas', 'Bloating', 'Nausea', 'Heartburn', 'Indigestion']}
kidney_biopsy = {"name": "kidney biopsy", "cost": 2804, "time": 48}
kidney_stone_removal = {"name": "kidney stone removal", "cost": 8016, "time": 2}
lead_test = {"name": "lead test", "cost": 32, "time": 32}
lipid_panel = {"name": "lipid panel", "cost": 188, "time": 1}
liver_biopsy = {"name": "liver biopsy", "cost": 3037, "time": 48}
lumbar_puncture = {"name": "lumbar puncture", "cost": 1274, "time": 48}
lymph_node_biopsy = {"name": "lymph node biopsy", "cost": 9139, "time": 48}
masectomy = {"name": "masectomy", "cost": 5749, "time": 2}
magenium_test = {"name": "magenium test", "cost": 31, "time": 3}
mercury_test = {"name": "mercury test", "cost": 34, "time": 72}
metabolic_panel = {"name": "metabolic panel", "cost": 144, "time": 24}
mra = {"name": "mra", "cost": 785, "time": 24}
mri = {"name": "mri", "cost": 5130, "time": 3}
osmolality_test = {"name": "osmolality test", "cost": 31, "time": 1}
pap_smear = {"name": "pap smear", "cost": 36, "time": 1}
pet_scan = {"name": "pet scan", "cost": 2234, "time": 2}
pregnancy_test = {"name": "pregnancy test", "cost": 194, "time": .5}
psychiatric_diagnostic_evaluation = {"name": "psychiatric diagnostic evaluation", "cost": 300, "time": 1}
psychotherapy = {"name": "psychotherapy", "cost": 201, "time": 1}
rabies_vaccine = {"name": "rabies vaccine", "cost": 612, "time": 1}
rectal_biopsy = {"name": "rectal biopsy", "cost": 4799, "time": 1}
rectal_exam = {"name": "rectal exam", "cost": 4741, "time": .5}
rsv_test = {"name": "rsv test", "cost": 31, "time": 1}
sickle_cell_screening = {"name": "sickle cell screening", "cost": 17, "time": 48}
skin_biopsy = {"name": "skin biopsy", "cost": 358, "time": 48}
sleep_apnea_exam = {"name": "sleep apnea exam", "cost": 243, "time": 8}
sperm_test = {"name": "sperm test", "cost": 29, "time": 1}
spinal_injection = {"name": "spinal injection", "cost": 1950, "time": 1}
sti_testing_panel = {"name": "sti testing panel", "cost": 390, "time": 1}
stool_test = {"name": "stool test", "cost": 88, "time": 2}
strep_test = {"name": "strep test", "cost": 270, "time": .5}
testicular_biopsy = {"name": "testicular biopsy", "cost": 5077, "time": 48}
throat_biopsy = {"name": "throat biopsy", "cost": 3393, "time": 48}
tracheotomy = {"name": "tracheotomy", "cost": 4531, "time": 1}
urinalysis = {"name": "urinalysis", "cost": 11, "time": 1}
vaginal_birth_delivery = {"name": "vaginal birth delivery", "cost": 7419, "time": 8}   
vasectomy = {"name": "vasectomy", "cost": 3075, "time": 1}
vitamin_deficiency_test = {"name": "vitamin deficiency test", "cost": 263, "time": 4}
xray = {"name": "x-ray", "cost": 698, "time": 1}

class patients:
    def __init__(self, id = None, name = None, age = None, sex = None, allergies = {}, conditions = None, chief_complaint = None, complaints = [], story = None, diagnosis = None, diagnosed = False,
    weight = 0, height = 0, bg = 0, bp = 0, o2 = 0, temp = 0, vision = False, pain = 0, brain = 0, eyes = 0, heart = 0, lungs = 0, kidneys = 0, liver = 0, has_broken_bones = False, broken_bones = []):
        self.id = id #Patient ID
        self.name = name #Patient Name
        self.age = age #Age
        self.sex = sex #Biological sex.
        self.allergies = allergies #What they're allergic to. It's a dictionary. Values are reactions.
        self.conditions = conditions #Prior conditions.
        self.chief_complaint = chief_complaint #Their foremost issue.
        self.complaints = complaints #Other issues.
        self.story = story #Quick background on the story of the injury/illness
        self.diagnosis = diagnosis #Major issue of what's wrong with them.
        self.diagnosed = diagnosed #If they've been diagnosed
        self.weight = weight #Weight
        self.height = height #Height
        self.bg = bg #Blood glucose
        self.bp = bp #Blood pressure (systolic)
        self.o2 = o2 #Oxygen saturation level
        self.temp = temp #Forehead temperature
        self.vision = vision #If they can see.
        self.pain = pain #Pain scale from 1-10.
        self.brain = brain #Overall brain health.
        self.eyes = eyes #Overall eye health.
        self.heart = heart #Overall heart health.
        self.lungs = lungs #Overall lungs health.
        self.kidneys = kidneys #Overall kidneys health.
        self.liver = liver #Overall liver health.
        self.has_broken_bones = has_broken_bones #If they have broken bones.
        self.broken_bones = broken_bones #List of broken bones.
    
p1 = patients(id = 1, name = 'John Smith', age = 62, sex = 'Male', allergies = {'oxycodone': 'hives'}, conditions = None, chief_complaint = 'vomiting',
    complaints = ['abdominal pain', 'lethargy', 'jaundice', 'lack of appetite', 'dark urine'], story = "I don't remember when it started. Maybe five years ago? I started getting really sluggish. I thought I was just getting old. But then I started losing interest in foods I loved, and then my pee would get really dark no matter how much water I drank. And then my stomach just starts hurting a lot. I laid off the fried foods but it keeps happening. And for the last few days, I just kept throwing up. The wife started begging me to go to the ER, and I finally gave in.",
    diagnosis = 'Liver Cancer', diagnosed = False, weight = 244, height = 65, bg = 141, bp = 136, o2 = 100, temp = 99.4, vision = True, pain = 3, brain = 100, eyes = 100, heart = 97, lungs = 99, 
    kidneys = 100, liver = 67, has_broken_bones = False, broken_bones = [])
p2 = patients(id = 2, name = 'Sally Samson', age = 49, sex = 'Female', allergies = {None: None}, conditions = None, chief_complaint = "trouble breathing",
    complaints = ['sore throat', 'congestion', 'fatigue', 'headache', 'loss of taste'], story = "I started feeling crummy three days ago. I think it's just a cold, but it's the worst cold of my life. I ate the chicken soup, I took the nyquil and I still feel like garbage. I came in when a couple hours ago, I just felt like I couldn't get a deep breath. Help me, doc.",
    diagnosis = 'COVID-19', diagnosed = False, weight = 157, height = 61, bg = 105, bp = 113, o2 = 96, temp = 101.7, vision = True, pain = 2, brain = 98, eyes = 97, heart = 100, lungs = 81, kidneys = 99,
    liver = 98, has_broken_bones = False, broken_bones = [])
p3 = patients(id = 3, name = 'Michael Jordanson', age = 36, sex = 'Male', allergies = {'penecillin': 'anaphylaxis'}, conditions = 'hypertension', chief_complaint = 'cramping in my leg',
    complaints = ['lethargy', 'dry mouth', 'nausea'], story = "I thought I was just gettinig old and couldn't handle my liquor anymore. I kept getting sick from drinking and wanting to sleep in more. I'm getting a bit thirsty. I can't remember when it started. Kind of a gradual thing, y'know? Maybe over the last year. My PCP said I had high blood pressure a few years back, but I'm not sure if that means suddenly my leg starts cramping up. It's at the calf too. That's all I know.",
    diagnosis = 'Diabetes Type 2', diagnosed = False, weight = 257, height = 68, bg = 225, bp = 150, o2 = 99, temp = 98.4, vision = True, pain = 6, brain = 97, eyes = 87, heart = 94, lungs = 100,
    kidneys = 89, liver = 93, has_broken_bones = False, broken_bones = [])
p4 = patients(id = 4, name = 'Taylor Outback', age = 23, sex = 'Female', allergies = {'peanut butter': "hives", "ibuprofen": "rash"}, conditions = None, chief_complaint = 'Vomiting',
    complaints = ['nausea', 'diarrhea', 'soreness'], story = "I saw some of my girlfriends late last night, and we had a night on the town. A couple of mimosas, a couple of apps. I got home, walked my cat, and then I started getting sick. I've been throwing up ever since.",
    diagnosis = 'Food Poisoning', diagnosed = False, weight = 123, height = 64, bg = 94, bp = 108, o2 = 100, temp = 102.1, vision = True, pain = 5, brain = 98, eyes = 97, heart = 99, lungs = 99,
    kidneys = 97, liver = 93, has_broken_bones = False, broken_bones = [])
p5 = patients(id = 5, name = 'Crazy Mike', age = 21, sex = 'Male', allergies = {None: None}, conditions = None, chief_complaint = 'psychosis', complaints = ['confusion', 'dilated eyes'],
    story = "I ain't telling you nothing! I don't know why the cops brought me here! I ain't done nothing wrong! Now get off my back!", diagnosis = 'methamphetamine', diagnosed = False, weight = 147,
    height = 70, bg = 96, bp = 133, o2 = 94, temp = 97.8, vision = True, pain = 8, brain = 87, eyes = 94, heart = 79, lungs = 93, kidneys = 93, liver = 94, has_broken_bones = True,
    broken_bones = ['right hand knuckle second digit', 'right hand knuckle third digit'])

patient_list = [p1, p2, p3, p4, p5]

#other game environment stuff
start_time = dt.datetime(2012, 1, 1, 8, 0, 0, 0)
elapsed_time = start_time
activity_log = []

def glucose_to_A1C(glucose):
    glucose = int(glucose)
    glucose += 46.7
    total = glucose / 28.7
    return round(total, 1)

class TimeManager:
    
    def __init__(self):
        self.start_time = dt.datetime(2012, 1, 2, 0, 0, 0, 0)
        self.elapsed_time = start_time

    def reset_time(self):
        self.start_time = dt.datetime(2012, 1, 2, 0, 0, 0, 0)
        self.elapsed_time = start_time

    def print_total_hours_taken(self):
        total_elapsed_seconds = (elapsed_time - start_time).total_seconds()
        total_elapsed_seconds = total_elapsed_seconds / 3600
        if int(elapsed_time.strftime("%H")) >= 12:
            ampm = " PM"
        else:
            ampm = " AM"
        time_entered = elapsed_time.strftime("%I:%M" + ampm + " %A")
        return time_entered

tm = TimeManager()

current_patient = random.choice(patient_list)

current_patient = random.choice(patient_list)

class player:
    def __init__(self):
        self.current_patient = random.choice(patient_list)
        current_patient = self.current_patient
        
    def simulation_start(self, current_patient):
        print('''Welcome to this Medical Diagnostic Training Tool. Whether you look to this program as practice for dealing with a patient or merely to have fun, I hope you enjoy your experience here. Know that these scenarios can absolutely happen in real life and that your actions have consequences.

''')
        self.menu(current_patient)
        
    def menu(self, current_patient):
        menu_list = ['c', 't', 'm', 'p', 'r', 's', 'd', 'v']
        menu_selection = input('''What do you want to do? 
        Your choices are:
        A = Check with Admin
        C = Consult a Specialist
        D = Diagnose the Patient
        M = Prescribe Medication
        P = Procedures and Surgery
        R = Check Patient Records
        T = Talk to Patient
        V = Check Patient Vitals

        ''')

        if menu_selection.lower() == "r":
            self.patient_records(current_patient)
            self.menu(current_patient)
        if menu_selection.lower() == "t":
            self.patient_discussion(current_patient)
        if menu_selection.lower() == "m":
            self.prescribe_medication(current_patient)
        if menu_selection.lower() == "v":
            self.vitals(current_patient)
        if menu_selection.lower() == "s":
            self.perform_surgery(current_patient)
        if menu_selection.lower() == "d":
            self.diagnose_patient(current_patient)
        if menu_selection.lower() == "c":
            self.consult_specialist(current_patient)
        if menu_selection.lower() == "p":
            self.procedures_surgery(current_patient)
        if menu_selection.lower() == "a":
            self.admin(current_patient)
        if menu_selection.lower() not in menu_list:
            print("You've chosen an invalid action. Please try again. ")
        self.menu(current_patient)
    
    def patient_discussion(self, current_patient):
        question_count = 0
        discussion_list = ['a', 'al', 'b', 'c', 'cc', 'h', 'n', 's', 'w', 'main', 'menu']
        discussion_question = input('''What would you like to ask the patient? Type "L" for a list of what you can ask them. ''')

        if discussion_question.lower() == "l":
            print('''You can select:
            A for their age.
            AL for their allergies.
            B for the background of this illness.
            C for their other complaints.
            CC for their chief complaint.
            H for their height.
            N for their name.
            S for their sex.
            W for their weight.

            Or type "menu" to go back to the main screen. ''')
            print()
            self.patient_discussion(current_patient)        
        if discussion_question.lower() == "n":
            print("My name is " + current_patient.name + ". ")
            question_count += 1
            print()
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "a":
            print("I'm "+ str(current_patient.age) + " years old. ")
            question_count += 1
            print()
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "s":
            print("I'm a "+ current_patient.sex + ". ")
            question_count += 1
            print()
            self.patient_discussion(current_patient)
        if discussion_question.lower() == 'al':
            try:
                print("As far as I'm aware, I'm allergic to " + current_patient.keys() + "." )
                print()
            except:
                print("I'm not allergic to anything.")
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "b":
            print(current_patient.story)
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "cc":
            print("I'd say the biggest thing bothering me now is " + current_patient.chief_complaint + ". ")
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "c":
            if len(current_patient.complaints) > 1:
                print("What symptoms I'm having? I'd say I'm experiencing " + ', '.join(current_patient.complaints[:-1]) + " and " + str(current_patient.complaints[-1]) + ". ")
            else:
                print("What symptoms I'm having? I'd say I'm experiencing " + str(curent_patient.complaints) + ".")
            print()
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "h":
            patient_feet = math.floor(current_patient.height/12)
            print("I am " + str(patient_feet) + ' feet and ' + str(current_patient.height - (patient_feet*12)) + ' inches tall.')
            print()
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "w":
            perceived_weight = int(random.randint((round(current_patient.weight * .9)), round((current_patient.weight * 1.1))))
            print("Last time I weighed myself, I was somewhere around " + str(perceived_weight) + " pounds. ")
            print()
            question_count += 1
            self.patient_discussion(current_patient)
        if discussion_question.lower() == "p":
            print("On a scale of one to ten, my pain level is about a " + current_patient.pain + ". ")
            print()
            question_count += 1
            self.patient_discussion(current_patient)
        elif discussion_question.lower() == "main" or discussion_question.lower() == "menu":
            self.update_log(tm, 'Visited the patient', 0, 1)
            self.menu(current_patient)
        elif discussion_question.lower() not in discussion_list:
            print("What the heck are you even asking me, doc?")
            print()
            question_count += 1
            self.patient_discussion(current_patient)
    
    def update_log(self, tm, activity, cost, time_required):
        global time_entered
        activity_log.append({"Time Entered": tm.print_total_hours_taken(), 'Activity': activity, 'Cost': cost, 'Time Required (Hours)': time_required})
        list(activity_log[-1].values())[0]: tm.print_total_hours_taken()

    def admin(self, current_patient):
        try:
            activity_df = pd.DataFrame(activity_log)
            time_spent = activity_df['Time Required (Hours)'].sum()
            money_spent = activity_df['Cost'].sum()
            print("Admin: You're curious what I think about your progress? Sure.")
            print()
            if time_spent > 15:
                print("As far as time goes, you're wasting too much of it. This case shouldn't take so long.")
            else:
                print("You're doing fine with time. ")

            if money_spent > 5000:
                print("Now, onto the money aspect. The hospital's not made out of it! You're wasting hospital resources!")
            else:
                print("As for the financial aspect of things... So far, you're allocating hospital resources responsibly. Keep it up.")

            if current_patient.diagnosed == False:
                print("Carry on.")
            if current_patient.diagnosed == True:
                print("I heard that you diagnosed the patient. Good job.")
        except:
            print("Admin: Why are you asking me about your progress? You haven't done anything yet. Go see the patient.")
        self.menu(current_patient)
        
    def patient_records(self, current_patient):
        print("Name: " + current_patient.name)
        print("Age: " + str(current_patient.age))
        print("Sex: " + current_patient.sex)
        print("Weight: " + str(current_patient.weight))
        print("BMI: " + str(round(int(current_patient.weight)/(int(current_patient.height)*int(current_patient.height))*703, 1)))
        print("Height (inches): " + str(current_patient.height))
        if len(activity_log) > 0:
            try:
                for activity in activity_log:
                    print()
                    print('\n'.join("{}: {}".format(k, v) for k, v in activity.items()))
            except:
                print("Can't print the activity log.")
        else:
            pass
        self.menu(current_patient)
        
    def vitals(self, current_patient):
        vitals_selection = input('What kind of diagnostic test would you like to do? Type "L" for a list of tests. ')
    
        if vitals_selection.lower() == "l":
            print('''You can select:
            BG to test their blood glucose.
            BP to test their blood pressure.
            O2 to test their oxygen level.
            T to take their temperature.
            W to weigh the patient.

            Or type "menu" to go back to the main screen. ''')
        if vitals_selection.lower() == "t":
            print('The temperature reads as ' + str(current_patient.temp) + " F. ")
            print()
            self.update_log(tm.print_total_hours_taken, 'Temperature', 0, 0)
            self.vitals(current_patient)
        if vitals_selection.lower() == "w":
            print('You weighed the patient and found that they weigh ' + str(current_patient.weight) + " pounds. ")
            print()
            self.update_log(tm.print_total_hours_taken, 'Weight', 0, 0)
            self.vitals(current_patient)
        if vitals_selection.lower() == "bg":
            print("You tested the patient's blood glucose. The results of the finger stick read as " + 
                  str(current_patient.bg) + " mmol/L. ")
            print()
            self.update_log(tm, 'Blood Glucose', 1, 0)
            self.vitals(current_patient)
        if vitals_selection.lower() == "bp":
            print("You tested the patient's systolic blood pressure and it came back as " + str(current_patient.bp) + ". ")
            print()
            self.update_log(tm, 'Blood Pressure', 0, 0)
            self.vitals(current_patient)
        if vitals_selection.lower() == "o2":
            print("The patient's oximeter read at " + str(current_patient.o2) + "%. ")
            print()
            self.update_log(tm, 'Oximeter', 0, 2)
            self.vitals(current_patient)
        if vitals_selection.lower() == "menu" or vitals_selection.lower() == "main":
            self.menu(current_patient)
        self.vitals(current_patient)

    def consult_specialist(self, current_patient):
        consult_selection = input('''Which specialist do you want to consult? Type L to see a list.
                          You can also type 'main' to go back to the main menu.''')
        if selection.lower() == "l":
            print('''You can select:

            CR for cardiology.
            GI for gastroenterology.
            NP for nephrology.
            NR for neurology.
            OP for ophthalmology.
            OR for orthopedics.
            PL for pulmonology.

            Who do you want to consult? ''')
        if consult_selection.lower() == "cr":
            print('''The cardiologist examined your patient and determined that the patient has about ''' + str(current_patient.heart) + "% of their heart function intact. ")
            print()
            self.update_log(tm, 'Consulted Cardiology', 0, 2)
            self.consult_specialist(current_patient)
    #     if consult_selection.lower() == "dm":
    #         print('''Dermatologist: Yeah, I saw the patient. They told me they didn't apply sunscreen before waltzing into the ER? Is melanoma some sort of joke to them? Anyways, the patient looks fine. ''')
    #         #I need to add a function here.
    #         print()
    #         update_log(TimeManager.print_total_hours_taken, 'Consulted Dermatology', 0, 2)
    #         self.consult_specialist(current_patient)
        if consult_selection.lower() == "gi":
            print('''The gastrolenterologist examined your patient and determined that the patient has about ''' + str(current_patient.liver) + '''% of their liver function intact.''')
            print()
            self.update_log(tm, 'Consulted Gastroenterology', 0, 2)
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "np":
            print('''The nephrologist examined your patient and determined that the patient has about ''' + str(current_patient.kidneys) + '''% of their kidney function intact.''')
            print()
            self.update_log(tm, 'Consulted Nephrology', 0, 2)
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "nr":
            self.update_log(tm, 'Consulted Neurology', 0, 2)
            print('''The neurologist examined your patient and determined that the patient has about ''' + str(current_patient.brain) + '''% of their brain function intact.''')
            print()
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "op":
            print('''The ophthalmologist examined your patient and determined that the patient has about ''' + str(current_patient.eyes) + "% of their eye function intact.")
            print()
            self.update_log(tm, 'Consulted Ophthalmology', 0, 3)
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "or":
            self.update_log(tm, 'Consulted Orthopedics', 0, 2)
            if len(patient['Broken Bones']) == 0:
                print('''The orthopedist examined the patient and found that there are no orthopedic-related issues withd the patient.''')
                print()
            if len(patient['Broken Bones']) == 1:
                print('''The orthopedist examined the patient and found that the patient has a broken ''' + str(current_patient.broken_bones) + ".")
                print()
            if len(patient['Broken Bones']) > 1:
                print('''The orthopedist examined the patient and found that the following bones are broken: ''' + str([bone.lower() for bone in current_patient.broken_bones]) + ".")
                print()
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "pl":
            print('''The pulmonologist examined your patient and determined that the patient has about ''' + str(current_patient.lungs).lower() + "% of their lung function intact.")
            self.update_log(tm, 'Consulted Pulmonology', 0, 2)
            print()
            self.consult_specialist(current_patient)
        if consult_selection.lower() == "main" or selection.lower() == "menu":
            self.menu(current_patient)
        self.consult_specialist(current_patient)

    def procedures_surgery(self, current_patient):
        procedures_surgery_selection = input("What type of test or procedure would you like to order for your patient? Type L to see a list.")

        if procedures_surgery_selection.lower() == "l":
            print('''You can select:
            19 to order a COVID-19 test.
            A1 to test their A1C.
            CN for Colonoscopy
            CT for CT Scan
            DS for them to order a drug screen.
            EC to order an elecrocardiogram.
            HA to order an Hepatitis A Antibody Test.
            HB to order an Hepatitis B Antibody Test.
            HC to order an Hepatitis C Antibody Test.
            HV to order an HIV test.
            LD to order a lead test.
            LN to order a lipid panel.
            LP to order a lumbar puncture.
            MA to order an MRA test.
            MC to order a mercury test.
            MG to order a magnesium test.
            MP to order a metabolic panel.
            MR to order an MRI Scan.
            OS to order an osmolality test.
            PE to order a psychiatric evaluation.
            PS to order a pap smear.
            PT to order a pet scan.
            RE to order a rectal exam.
            RV to order an RSV exam.
            SA to order a sleep apnea exam.
            SC to order a sickle cell screening.
            SI to order a spinal injection.
            SL to order a stool test.
            SP to order an STI testing panel.
            SR to order a strep test.
            ST to order a sperm test.
            UR to order a urinalysis test.
            VD to order a vitamin deficiency test.
            XR to order an X-Ray.

            or for biopsies:
            BB to biopsy their brain.
            BC to biopsy their testicle.
            BK to biopsy their kidney.
            BI to biopsy their skin.
            BL to biopsy their liver
            BN to biopsy their bone.
            BR to biopsy their rectum.
            BS to biopsy their breast.
            BT to biopsy their throat.
            BY to biopsy their lymph node.

            Or type "menu" to go back to the main screen. ''')
        if procedures_surgery_selection.lower() == "19":
            if "COVID-19" in current_patient.diagnosis:
                print("The COVID-19 test came back positive.")
            else:
                print("The COVID-19 test came back negative.")
            self.update_log(tm, 'COVID-19 Test', cost_dict['COVID-19 Test'], time_dict['COVID-19 Test'])
        if procedures_surgery_selection.lower() == "a1":
            print("The patient's A1C came back as " + str(glucose_to_A1C(current_patient.bg)))
            self.update_log(tm, 'COVID-19 Test', cost_dict['A1C'], time_dict['A1C'])
        if procedures_surgery_selection.lower() == "cn":
            print("The colonoscopy of the patient found no polyps, masses or lesions.")
            self.update_log(tm, 'Colonoscopy', cost_dict['Colonoscopy'], time_dict['Colonoscopy'])
        if procedures_surgery_selection.lower() == "ct":
            if current_patient.ct == True and "cancer" in current_patient.diagnosis:
                print("The CT scan has found a mass on the patient's " + (current_patient.diagnosis - " cancer") + " and found that it may be cancerous.")
            else:
                print("The CT scan has revealed nothing remarkable.")
            self.update_log(tm, 'CT Scan', cost_dict['CT Scan'], time_dict['CT Scan'])
        if procedures_surgery_selection.lower() == "ds":
            if len(current_patient.rec_drugs) == 0:
                print("The drug screen has found no recreational drugs.")
            elif len(current_patient.rec_drugs) == 1:
                print("The drug screen has found the patient has tested positive for " + ', '.join(current_patient.rec_drugs[0]) + ".")
            else:
                print("The drug screen has found the patient has tested for the following drugs:" + ', '.join(current_patient.rec_drugs[:-1]) + " and " + str(current_patient.rec_drugs[-1]) + "." )
            self.update_log(tm, 'Drug Screen', cost_dict['Drug Screen'], time_dict['Drug Screen'])
        if procedures_surgery_selection.lower() == "ec":
            if "heart disease" or "arrythmia" in current_patient.conditions or "heart disease" in current_patient.conditions:
                pass
            else:
                print("The electrocardiogram found nothing noteworthy.")
            self.update_log(tm, 'Electrocardiogram', cost_dict['Electrocardiogram'], time_dict['Electrocardiogram'])
        if procedures_surgery_selection.lower() == "ha":
            print("The patient tested negative for the Hepatitis A Antibody Test.")
            self.update_log(tm, 'Hepatitis A Antibody Test', cost_dict['Hepatitis A Antibody Test'], time_dict['Hepatitis A Antibody Test'])
        if procedures_surgery_selection.lower() == "hb":
            print("The patient tested negative for the Hepatitis B Antibody Test.")
            self.update_log(tm, 'Hepatitis A Antibody Test', cost_dict['Hepatitis B Antibody Test'], time_dict['Hepatitis B Antibody Test'])
        if procedures_surgery_selection.lower() == "hc":
            print("The patient tested negative for the Hepatitis C Antibody Test.")
            self.update_log(tm, 'Hepatitis A Antibody Test', cost_dict['Hepatitis C Antibody Test'], time_dict['Hepatitis C Antibody Test'])
        if procedures_surgery_selection.lower() == "hv":
            print("The patient tested negative for HIV.")
            self.update_log(tm, 'HIV Test', cost_dict['HIV Test'], time_dict['HIV Test'])
        if procedures_surgery_selection.lower() == "ld":
            if current_patient.diagnosis.lower() == "lead toxicity":
                pass
            else:
                print("The patient has normal levels of lead.")
        if procedures_surgery_selection.lower() == "ln":
            pass
        if procedures_surgery_selection.lower() == "lp":
            pass
        if procedures_surgery_selection.lower() == "ma":
            if "blood clot" in current_patient.complaints:
                pass
            else:
                print("There appears to be no clots within any blood vessels.")
            self.update_log(tm, 'MRA', cost_dict['MRA'], time_dict['MRA'])
        if procedures_surgery_selection.lower() == "mc":
            if current_patient.diagnosis.lower() == "mercury toxicity":
                pass
            else:
                print("The patient has normal levels of mercury.")
        self.update_log(tm, 'Mercury Test', cost_dict['Mercury Test'], time_dict['Mercury Test'])
        if procedures_surgery_selection.lower() == "mg":
            if current_patient.diagnosis.lower() == "magnesium toxicity":
                pass
            else:
                print("The patient has normal levels of magnesium.")
        self.update_log(tm, 'Mercury Test', cost_dict['Magnesium Test'], time_dict['Magnesium Test'])
        if procedures_surgery_selection.lower() == "mp":
            pass
        if procedures_surgery_selection.lower() == "mr":
            pass
        if procedures_surgery_selection.lower() == "os":
            pass
        if procedures_surgery_selection.lower() == "pe":
            pass
        if procedures_surgery_selection.lower() == "ps":
            pass
        if procedures_surgery_selection.lower() == "pt":
            pass
        if procedures_surgery_selection.lower() == "re":
            pass
        if procedures_surgery_selection.lower() == "sa":
            pass
        if procedures_surgery_selection.lower() == "sc":
            pass
        if procedures_surgery_selection.lower() == "si":
            pass    
        if procedures_surgery_selection.lower() == "sl":
            pass
        if procedures_surgery_selection.lower() == "sp":
            pass
        if procedures_surgery_selection.lower() == "sr":
            pass
        if procedures_surgery_selection.lower() == "st":
            pass
        if procedures_surgery_selection.lower() == "ur":
            pass
        if procedures_surgery_selection.lower() == "vd":
            pass
        if procedures_surgery_selection.lower() == "xr":
            pass
        if procedures_surgery_selection.lower() == "bb":
            pass
        if procedures_surgery_selection.lower() == "bc":
            pass
        if procedures_surgery_selection.lower() == "bk":
            pass
        if procedures_surgery_selection.lower() == "bi":
            pass
        if procedures_surgery_selection.lower() == "bl":
            pass
        if procedures_surgery_selection.lower() == "bn":
            pass
        if procedures_surgery_selection.lower() == "br":
            pass
        if procedures_surgery_selection.lower() == "bs":
            pass
        if procedures_surgery_selection.lower() == "bt":
            pass
        if procedures_surgery_selection.lower() == "by":
            pass
        if procedures_surgery_selection.lower() == "menu" or procedures_surgery_selection.lower() == "main" :
            self.menu(current_patient)
        self.procedures_surgery(current_patient)
        
    def prescribe_medication(self, current_patient):
        med_selection = input('''What do you want to prescribe? You can prescribe them:
        a = acetaminophen
        i = ibuprofen
        in = short-acting insulin
        ab = antibiotics

        Or you can type main to go back to the main menu. ''')

        roll = random.randint(1,10)

        if med_selection.lower() == 'a' and 'acetaminophen' not in current_patient.allergies.keys():
            try:
                self.update_log(tm, 'acetaminophen', cost_dict['Acetaminophen'], time_dict['Acetaminophen'])
                current_patient.pain = current_patient - 2
                if roll == 1 or roll == 2:
                    current_patient.complaints.append(random.choice(side_effects_dict['acetaminophen']))
                print("You have given the patient acetaminophen.")
                print(roll)
                print(current_patient.complaints)
            except:
                print("Error!")

        if med_selection.lower() == 'i' and 'ibuprofen' not in current_patient.allergies.keys():
            self.update_log(tm, 'ibuprofen', cost_dict['Ibuprofen'], time_dict['Ibuprofen'])
            current_patient.pain = current_patient.pain - 2
            if roll == 1 or roll == 2:
                current_patient.complaints.append(random.choice(side_effects_dict['Ibuprofen']))
            print("You have given the patient ibuprofen.")
            print(roll)
            print(patient['Complaints'])

        if med_selection.lower() == 'in' and 'insulin' not in current_patient.allergies.keys():
            try:
                self.update_log(tm, 'insulin', cost_dict['Humalog'], time_dict['Humalog'])
                patient.bg = patient.bg - 30
                current_patient.weight = current_patient.weight + 3
                print("You have given the patient acetaminophen.")
                print(roll)
            except:
                print("Error!")

        if med_selection.lower() == 'main' or med_selection.lower() == 'main':
            self.menu(current_patient)

        prescribe_medication(current_patient)
        
    def diagnose_patient(self, current_patient):
        guess = input('What illness would you like to diagnose the patient with? Or type "Main" or "Menu" to go back. ')
        diagnose_score = fuzz.token_set_ratio(guess, current_patient.diagnosis)
        if guess.lower() == "menu" or guess.lower() == "main":
            self.menu(current_patient)
        if diagnose_score > 70:
            current_patient.diagnosed = True
            print("You are correct, and have successfully diagnosed your patient!")
            print('Diagnose Score: ' + str(diagnose_score))
            self.update_log(tm, 'Correctly attempted to diagnose the patient with' + str(current_patient.diagnosis), 0, 2)
            self.patient_survey()
        else:
            print("You are incorrect. You have not successfully diagnosed your patient!")
            self.update_log(tm, 'Incorrectly attempted to diagnose the patient with' + str(current_patient.diagnosis), 0, 2)
            print('Diagnose Score: ' + str(diagnose_score))
            self.diagnose_patient(current_patient)
        print()
        print(diagnosis)
        print('Diagnose Score: ' + str(diagnose_score))
        self.menu(current_patient)

    def patient_survey(self, current_patient):
        print("Congratulations! You have successfully diagnosed the patient!")
        # Factor in:
        # - adverse reactions while admitted.
        # - how many actions taken. (Speed to diagnosis)
        # - How many/severe complications happened.
        # - Unnecessary actions.
        # - Number of wrong decisions.

player = player()

player.simulation_start(current_patient)
